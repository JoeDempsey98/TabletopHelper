@page "{id:min(1)}"
@model CharacterSite.Pages.Characters.DetailsModel
@{
    ViewData["Title"] = "Details";
    bool hasAbilities;
    if (Model.Character.AbilityScores == null)
        hasAbilities = false;
    else
        hasAbilities = true;
    string noAbility = "Not set";
}

<!--
    include more cards for things like equipment, attacks, spells, etc.
    add buttons to go back, edit, and delete
    stylize the css better to be closer in design to a character sheet
-->

<div class="row justify-content-center m-3">
    <div class="col-md-8">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">@Model.Character.CharacterName</h4>
                <h6 class="card-text">
                    @Model.Character.Race @foreach(var c in Model.Character.Classes) 
                    {
                        @c.Name 
                    }
                    @Model.Character.Background
                </h6>
                <div class="card-text">
                    HP: @Model.Character.HitPoints.CurrentHealth / @Model.Character.HitPoints.MaximumHealth
                    Alignment: @Model.Character.Alignment
                    Experience: @Model.Character.ExperiencePoints
                </div>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    Strength: @if (hasAbilities)
                    {@Model.Character.AbilityScores.Strength.ScoreValue}
                else
                {@noAbility}
                    (@Model.Character.AbilityScores.Strength.ScoreModifier)
                </li>
                <li class="list-group-item">
                    Dexterity: @if (hasAbilities)
                    {@Model.Character.AbilityScores.Dexterity.ScoreValue}
                else
                {@noAbility}
                    (@Model.Character.AbilityScores.Dexterity.ScoreModifier)
                </li>
                <li class="list-group-item">
                    Constitution: @if (hasAbilities)
                    {@Model.Character.AbilityScores.Constitution.ScoreValue}
                else
                {@noAbility}
                    (@Model.Character.AbilityScores.Constitution.ScoreModifier)
                </li>
                <li class="list-group-item">
                    Wisdom: @if (hasAbilities)
                    {@Model.Character.AbilityScores.Wisdom.ScoreValue}
                else
                {@noAbility}
                    (@Model.Character.AbilityScores.Wisdom.ScoreModifier)
                </li>
                <li class="list-group-item">
                    Intelligence: @if (hasAbilities)
                    {@Model.Character.AbilityScores.Intelligence.ScoreValue}
                else
                {@noAbility}
                    (@Model.Character.AbilityScores.Intelligence.ScoreModifier)
                </li>
                <li class="list-group-item">
                    Charisma: @if (hasAbilities)
                    {@Model.Character.AbilityScores.Charisma.ScoreValue}
                else
                {@noAbility}
                    (@Model.Character.AbilityScores.Charisma.ScoreModifier)
                </li>
            </ul>
            @foreach(var feat in Model.Character.Features)
            {
                <div class="card-text">@feat</div>
            }
        </div>
    </div>
</div>